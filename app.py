import json
import os
from datetime import timedelta
from functools import wraps
from itertools import cycle

import cfscrape
import requests
from fake_useragent import UserAgent
from flask import Flask, send_file
from redis import Redis

app = Flask(__name__)

redis = Redis(os.getenv("REDIS_HOST"), os.getenv("REDIS_PORT"))

scraper = cfscrape.create_scraper()

ua = UserAgent()

URL = "https://www.rinkejopuslapis.lt/pretendentu-i-kandidatus-iskelimo-paremimas8?p_p_id=applicantsportlet_WAR_rpportlet&p_p_lifecycle=2&p_p_resource_id=loadList&pagination[itemsPerPage]=20"

proxies = set(
    (
        "1.20.100.115:36056",
        "1.20.100.33:30807",
        "1.20.97.45:40685",
        "1.20.97.51:49709",
        "101.255.117.162:8080",
        "103.106.59.58:34908",
        "103.111.219.159:53281",
        "103.18.132.202:34274",
        "103.203.173.149:33623",
        "103.216.49.187:8080",
        "103.216.49.189:8080",
        "103.216.50.67:8080",
        "103.224.5.5:54143",
        "103.231.229.94:53281",
        "103.239.54.111:23500",
        "103.242.104.173:23500",
        "103.253.211.250:60953",
        "103.5.125.18:40211",
        "103.56.205.212:53460",
        "103.75.164.33:51667",
        "103.78.213.226:46167",
        "103.79.228.177:56130",
        "104.236.55.48:8080",
        "109.224.1.210:34651",
        "109.224.36.172:57367",
        "110.170.149.19:32243",
        "110.74.216.216:53495",
        "114.57.238.1:59964",
        "115.78.13.133:8080",
        "116.108.150.65:8080",
        "116.108.150.77:8080",
        "116.108.150.81:8080",
        "116.197.155.214:35634",
        "116.203.1.181:1994",
        "117.103.2.249:58276",
        "118.173.232.215:49065",
        "118.174.232.239:39258",
        "118.175.176.132:58711",
        "118.175.93.103:57759",
        "118.175.93.33:60955",
        "118.175.93.98:45103",
        "118.179.199.171:34203",
        "119.76.132.153:8080",
        "120.50.19.46:48045",
        "122.144.8.29:43935",
        "128.199.221.132:3128",
        "13.250.6.148:80",
        "136.228.129.36:41838",
        "138.121.130.50:50600",
        "156.67.84.68:53281",
        "157.230.45.54:3128",
        "158.140.140.73:32087",
        "158.58.132.12:56962",
        "162.255.134.161:80",
        "166.249.54.244:47284",
        "167.114.180.102:8080",
        "168.232.198.25:32009",
        "176.102.213.252:60467",
        "176.195.172.225:38003",
        "176.235.186.242:37043",
        "176.241.92.39:39133",
        "176.9.211.175:8080",
        "177.126.88.62:53281",
        "178.128.58.215:3128",
        "178.151.205.154:44011",
        "178.19.187.84:59736",
        "178.218.44.221:50916",
        "179.127.249.117:46257",
        "180.92.231.78:54361",
        "185.103.88.13:53281",
        "185.189.208.65:61360",
        "185.194.24.187:37854",
        "185.202.165.1:53281",
        "186.159.112.6:53281",
        "186.192.195.220:38983",
        "188.133.180.25:8080",
        "188.136.190.86:38243",
        "188.168.27.71:36733",
        "188.244.208.201:50021",
        "188.40.22.208:443",
        "190.122.97.138:52622",
        "190.152.14.122:49121",
        "190.8.168.252:8080",
        "191.7.208.89:8080",
        "195.158.27.98:3128",
        "195.225.49.135:58302",
        "195.34.15.98:34671",
        "197.232.55.224:46822",
        "200.192.156.24:36442",
        "200.37.16.253:59700",
        "201.163.73.93:53281",
        "201.20.92.102:33490",
        "201.54.31.1:55282",
        "202.144.201.38:44091",
        "203.173.92.250:61598",
        "203.192.241.99:48092",
        "203.205.32.74:53978",
        "203.45.134.235:36738",
        "203.80.170.87:21776",
        "212.142.196.57:50430",
        "212.164.208.73:49986",
        "212.192.202.207:4550",
        "212.42.206.56:3128",
        "213.14.32.75:43687",
        "213.142.206.146:53281",
        "213.59.189.18:52250",
        "219.90.87.91:53281",
        "24.172.225.122:53281",
        "27.123.255.134:34003",
        "27.68.132.217:45871",
        "3.16.82.24:80",
        "31.209.104.3:42590",
        "31.41.63.165:53281",
        "36.89.181.11:43453",
        "36.89.184.139:33978",
        "36.89.41.26:49877",
        "37.131.229.166:41992",
        "37.220.68.145:39035",
        "37.228.65.107:32052",
        "37.235.67.178:34450",
        "41.215.26.182:8080",
        "41.78.198.243:23500",
        "41.90.115.18:61733",
        "43.245.202.120:37403",
        "43.245.218.166:53281",
        "45.32.42.234:8080",
        "45.4.85.87:9991",
        "45.64.122.210:31536",
        "45.71.108.162:53281",
        "45.71.151.226:32231",
        "46.10.241.140:53281",
        "46.219.80.142:58870",
        "47.254.23.164:8080",
        "5.19.144.121:47745",
        "50.236.148.246:39970",
        "50.250.144.57:36003",
        "62.218.24.135:80",
        "62.89.31.55:58162",
        "68.183.185.17:8888",
        "77.252.133.48:25772",
        "77.37.142.203:53281",
        "78.156.225.170:41258",
        "78.29.42.40:44806",
        "78.58.136.55:39232",
        "80.243.8.126:52376",
        "80.76.240.168:30268",
        "81.16.9.138:61321",
        "81.163.57.46:41258",
        "81.223.122.78:37397",
        "85.238.98.222:52596",
        "87.237.236.24:8080",
        "88.205.171.222:8080",
        "91.150.77.58:54037",
        "91.190.80.100:31659",
        "91.207.147.243:38472",
        "91.215.107.7:58970",
        "91.222.92.161:53281",
        "91.225.165.4:60308",
        "91.82.42.2:43881",
        "92.39.56.3:52081",
        "94.231.165.153:51573",
        "95.181.45.234:55878",
        "95.47.197.43:34647",
        "95.84.190.160:31770",
        "96.80.89.69:8080",
        "96.9.69.230:53281",
    )
)
proxy_pool = cycle(proxies)


def cache_json(func):
    @wraps(func)
    def wrap(*args, **kwargs):
        key = f"rinkimai_json"
        value = redis.get(key)
        if value:
            return value.decode()

        value = func(*args, **kwargs)
        redis.setex(key, timedelta(seconds=4), value)
        return value.decode()

    return wrap


@app.route("/")
def index():
    return send_file("static.html")


@app.route("/data")
@cache_json
def data():
    print("requesting")
    proxy = next(proxy_pool)
    headers = requests.utils.default_headers()
    headers.update({"User-Agent": ua.random})

    answ = scraper.get(
        URL,
        allow_redirects=False,
        headers=headers,
        # proxies={"http": proxy, "https": proxy},
    )
    print(answ.content)
    return answ.content
